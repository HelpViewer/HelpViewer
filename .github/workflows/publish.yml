name: Publishing

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch'
        required: true
        default: 'master'

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.source_branch || github.ref }}

      - name: Check if should be published
        if: ${{ github.event_name != 'workflow_dispatch' && !contains(github.event.head_commit.message, '[pub]') }}
        run: |
          echo "[pub] string is missing in commit message, skipping ..."
          exit 0

      - name: Publish
        id: pub
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[pub]') }}
        run: |
          mkdir -p hvdata/data
          
          echo "::group::Processing deps.lst"
          if [ -f deps.lst ]; then
            dependList=$(cat deps.lst)

            for line in $(printf '%s\n' "$dependList"); do
              cleanedText=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              [ -z "$cleanedText" ] && continue
              num_pipes=$(echo "$cleanedText" | awk -F'|' '{print NF-1}')
              set -- $(echo "$cleanedText" | awk -F'|' '{printf "%s %s %s", $1, $2, $3}')
    
              if [ "$num_pipes" -eq 1 ]; then
                out="hvdata/data/$1"
                url="$2"
              elif [ "$num_pipes" -eq 2 ]; then
                out="hvdata/$1"
                url="$2"
              else
                continue
              fi
    
              echo "Downloading from -> to : $url -> $out"
              wget -q -O "$out" "$url"
            done
          else
            echo "deps.lst file not defined, skipping ..."
          fi
          echo "Processing of deps.lst finished"
          echo "::endgroup::"
          
          echo "::group::Processing zip subdirectory"
          shopt -s nullglob
          cp -f ./zip/* ./hvdata/data
          shopt -u nullglob
          echo "::endgroup::"

          echo "::group::Packaging"
          cd hvdata/data
          zip -r ../data.zip .
          cd ..
          rm -rf data/
          echo "::endgroup::"

          echo "::group::Packaging deploy bundle"
          cd ..
          mkdir _distrib
          cd _distrib
          cp ../HelpViewer.htm .
          cp -rf ../hvdata .
          zip -r ../package.zip .
          cd ..
          if [ -f ./package.zip ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: Create tag
        id: newtag
        if: steps.pub.outputs.exists == 'true'
        run: |
          echo "::group::Version overview"
          VERSION=$(awk '/^## /{print $2; exit}' CHANGELOG.md)
          BODY=$(awk '/^## /{if (seen++) exit} seen' CHANGELOG.md | tail -n +2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
          TAG="$VERSION"

          echo "::group::Old release delete"
          RELEASE_ID=$(curl -s -H "Authorization: token $TOKEN" \
            https://api.github.com/repos/$REPO/releases/tags/$TAG | jq -r .id)

          if [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting release ID $RELEASE_ID"
            curl -s -X DELETE -H "Authorization: token $TOKEN" \
              https://api.github.com/repos/$REPO/releases/$RELEASE_ID
          fi
          echo "::endgroup::"
          
          echo "::group::Old tag delete"
          if git ls-remote --tags origin | grep -q "$TAG"; then
            git tag -d "$TAG" || true
            git push origin ":refs/tags/$TAG" || true
          fi
          echo "::endgroup::"

          echo "::group::New tag created"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag $TAG
          git push origin $TAG || true
          echo "::endgroup::"
                    
      - name: Create release
        id: crelease
        if: steps.pub.outputs.exists == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.newtag.outputs.version }}
          release_name: ${{ steps.newtag.outputs.version }}
          body: ${{ steps.newtag.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets._TOKEN }}

      - name: Upload asset
        if: steps.pub.outputs.exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets._TOKEN }}
        with:
          upload_url: ${{ steps.crelease.outputs.upload_url }}
          asset_path: ./package.zip
          asset_name: package.zip
          asset_content_type: application/zip
