<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Help Viewer</title>
  <script src="hvdata/jszip"></script>
  <style>
:root {
  --c-border: #ccc;
  --c-background: #f0f0f0;
  --c-backgroundHead: #eee;
  --c-numbering: #888;
  --c-line0: #f9f9f9;
  --c-line1: #ffffff;
  --c-tabLine0: rgba(0, 0, 0, 0);
  --c-tabLine1: var(--c-background);
  --c-anchorHover: #000;
  --c-anchorColor: var(--c-border);
}

html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  font-family: sans-serif;
}

h1 {
  margin: 0;
}

.container {
  display: flex;
  height: 100vh;
}

.sidebar {
  width: 250px;
  background: var(--c-background);
  overflow-y: auto;
  border-right: 1px solid var(--c-border);
  position: relative;
  transition: transform 0.3s ease;
}

.sidebar .hide-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  background: var(--c-border);
  border: none;
  padding: 8px 14px;
  cursor: pointer;
  font-size: 1.2em;
  border-radius: 5px;
}

.sidebar.hidden {
  display: none;
}

.main {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.header {
  background: var(--c-backgroundHead);
  padding: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--c-border);
}

.pnl-btn {
  background: var(--c-border);
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

.hidden-btn {
  display: none;
}

.content {
  flex: 1;
  overflow-y: auto;
  padding: 1em;
  font-size: 1em;
}

.tree {
  padding-top: 8px;
}

ul.tree,
ul.tree ul {
  list-style: none;
  margin: 0;
  padding-left: 1.5em;
}

ul.tree li {
  margin: 0.2em 0;
}

ul.tree summary {
  display: block;
  cursor: pointer;
}

ul.tree summary::-webkit-details-marker {
  display: none;
}

ul.tree details > summary::before {
  content: "▶";

  display: inline-block;
  margin-right: 5px;
}

ul.tree details[open] > summary::before {
  transform: rotate(90deg);
}

@media (max-width: 635px) {
  .container {
    flex-direction: column;
  }

  .sidebar {
    width: 100%;
    border-right: none;
    border-bottom: 1px solid var(--c-border);
    min-height: 60px;
    display: block;
    padding: 0;
  }

  .sidebar .hide-btn {
    position: absolute;
    top: 10px;
    right: 10px;
  }

  .main {
    width: 100%;
  }
}

@media (min-width: 1000px) {
  .sidebar.too-wide + .main {
    flex-basis: 100%;
    width: 100%;
  }
}

/*S: markdown formatting*/
.content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
    margin-top: var(--base-size-24);
    margin-bottom: var(--base-size-16);
    font-weight: var(--base-text-weight-semibold, 600);
    line-height: 1.25;
}

.content h1 {
    padding-bottom: .3em;
    font-size: 2em;
    border-bottom: 1px solid var(--c-border, var(--c-border));
}

.content h2 {
    padding-bottom: .3em;
    font-size: 1.5em;
    border-bottom: 1px solid var(--c-border, var(--c-border));
}

.content li {
    margin-top: .5em;
}

.content pre {
    display: block;
    padding: 9.5px;
    margin: 0 0 10px;
    line-height: 1.42857143;
    word-break: break-all;
    word-wrap: break-word;
    background-color: var(--c-background);
    border: 1px solid var(--c-border);
    border-radius: 4px;
    overflow: auto;
}

.content table {
    max-width: 100%;
    overflow: auto;
    font-variant: tabular-nums;
    margin: 1em;
    margin-left: 0;
    width: 100%;
    border-collapse: collapse;
}

.content table tr:nth-child(even) {
    background-color: var(--c-tabLine1);
}

.content table tr:nth-child(odd) {
    background-color: var(--c-tabLine0);
}

.content table th {
    border: 1px solid var(--c-border);
    padding: 6px 13px;
}

.content table td {
    border: 1px solid var(--c-border);
    padding: 6px 13px;
}

pre code.language-mermaid, pre:has(> code.language-mermaid) {
  display: none;
}
/*E: markdown formatting*/

/*S: code listing numbering*/
pre {
  counter-reset: line;
}

code {
  display: block;
  white-space: pre;
  overflow: auto;
}

code::before {
  content: "";
}

code::after {
  content: "";
}

pre code {
  display: block;
  position: relative;
  padding-left: 2em;
  line-height: 1.5;
  font-family: monospace;
  background: repeating-linear-gradient(
    to bottom,
    var(--c-line0) 0,
    var(--c-line0) 1.5em,
    var(--c-line1) 1.5em,
    var(--c-line1) 3em
  );
}

pre.code-numbers {
  position: relative;
}

pre.code-numbers code {
  display: block;
  counter-reset: line;
}

pre.code-numbers code::before {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  content: "";
  background: var(--c-backgroundHead);
  border-right: 1px solid var(--c-border);
}

pre.code-numbers code span {
  counter-increment: line;
}

pre.code-numbers code span::before {
  content: counter(line);
  display: inline-block;
  margin-left: -1em;
  margin-right: 1.5em;
  text-align: right;
  color: var(--c-numbering);
}
/*E: code listing numbering*/

/*S: anchors in headings*/
.anchor-link {
  text-decoration: none;
  color: var(--c-anchorColor);
  font-weight: normal;
  margin-left: 0.25em;
  font-size: 0.8em;
}

.anchor-link:hover {
  color: var(--c-anchorHover);
}
/*E: anchors in headings*/

/*S: print support*/
@media print {
  body * {
    visibility: hidden;
  }

  .main, .main * {
    visibility: visible;
  }

  .main {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
  }

  a {
    color: black;
  }
  
  .header {
    background-color: transparent;
  }
  
  button, .anchor-link {
    display: none !important;
  }
  
  svg {
    filter: grayscale(100%);
  }
  
/*  svg path {
    fill: gray !important;
    stroke: gray !important;
  }*/
}
/*E: print support*/

#toolbar {
  display: flex;
  align-items: stretch;
  gap: 0.5rem;
}

#toolbar button {
  flex: 1 1 auto;
  max-height: 2rem;
  line-height: 1.5;
  overflow: hidden;
}
  </style>
</head>
<body>
  <div class="container">
    <div class="sidebar" id="sidebar">
      <button class="hide-btn" onclick="toggleSidebar()" title="Hide panel">←</button>
<ul class="tree" id="tree">
</ul>
    </div>

    <div class="main" id="main">
      <div class="header">
        <h1 id="mtitle">&nbsp;</h1>
        <div id="toolbar">
        <button class="hidden-btn pnl-btn" id="showBtn" onclick="toggleSidebar()" title="Show browsing panel">☰</button>
        <button class="hidden-btn pnl-btn" id="nav-left" onclick="navPrev(event);" title="Previous topic">⬅</button>
        <button class="hidden-btn pnl-btn" id="nav-top" onclick="navTop(event);" title="Parent topic">⬆</button>
        <button class="hidden-btn pnl-btn" id="nav-right" onclick="navNext(event);" title="Next topic">➡</button>
        </div>
      </div>
      <div class="content" id="content">
      </div>
    </div>
  </div>

  <script>
    let arch3rdp = null;
    
    loadZipFromUrl('hvdata/data.zip')
      .then(arch2 => {
        arch3rdp = arch2;
        return searchArchiveForFile('marked.min.js', arch2);
      })
      .then(content => {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.textContent = content;
        document.head.appendChild(script);
      });
        
    const navL = document.getElementById('nav-left');
    const navT = document.getElementById('nav-top');
    const navR = document.getElementById('nav-right');
    
    const sidebar = document.getElementById('sidebar');
    const showBtn = document.getElementById('showBtn');
    let msgNoData = '';

    let dataPath = '';
    let pagePath = '';
    let idxTreeItem = 0;
    
    function LoadURLParameters() {
      const urlParams = new URLSearchParams(window.location.search);
      dataPath = urlParams.get('d');
      pagePath = urlParams.get('p');
      idxTreeItem = parseInt(urlParams.get('id')) || 0;
    }
    
    LoadURLParameters();
    updateNavButtons(idxTreeItem);

    const mainTitle = document.getElementById('mtitle');
    const tree = document.getElementById('tree');
    const contentPane = document.getElementById('content');

    window.addEventListener('popstate', () => {
      LoadURLParameters();

      if (typeof dataPath !== 'string' || dataPath.trim() === '') {
        dataPath = 'Help.zip';
      }

      getDataOfPathInZIP(pagePath, pagePath);
      updateNavButtons(idxTreeItem);
    });

    document.getElementById('content').addEventListener('click', function(event) {
      const link = event.target.closest('a');
      if (!link) return;
  
      const href = link.getAttribute('href');
  
      if (href.startsWith('http') || href.startsWith('//')) return;
  
      event.preventDefault();
      history.pushState({}, '', href);
      
      LoadURLParameters();
      getDataOfPathInZIP(pagePath, pagePath);
    });

    function scrollToAnchor(id) {
      const targetO = document.getElementById(id);
      if (targetO) {
        targetO.scrollIntoView({ behavior: 'smooth' });
      }
    }
    
    function SetHeaderText(txt) {
       mainTitle.textContent = txt;
    }
    
    let archive;

    if (!dataPath || !pagePath) {
      SetHeaderText('Select item from left');
    }
    
    if (!dataPath) {
      console.log('Data file has not been specified. Use ?d= and its path in URI. Used default file name.');
      dataPath = 'Help.zip';
      msgNoData = 'Data file has not been specified. Use <b>?d=</b> followed by the file path in the URI. The default file name <b>' + dataPath + '</b> was used instead. If the left panel is empty, the file <b>' + dataPath + '</b> probably does not exist in the viewer\'s local directory. As a next step, check <b>p=</b> for a valid path inside the help ZIP archive.';
      document.getElementById('content').innerHTML = msgNoData;
    }
    
    if (dataPath) {
      loadZipFromUrl(dataPath)
        .then(arch2 => {
          archive = arch2;
          return searchArchiveForFile("tree.lst", arch2);
        })
        .then(content => {
          tree.innerHTML = linesToHtmlTree(content);
          revealTreeItem('tree-' + idxTreeItem);
          updateNavButtons(idxTreeItem);
          
          if (pagePath) {
            getDataOfPathInZIP(pagePath, pagePath);
          }
        })
        .catch(err => {
          console.error("Error:", err);
        });
    }

    if (!pagePath) {
      pagePath = 'README.md';
      let txt = contentPane.innerHTML;
      getDataOfPathInZIP(pagePath, pagePath);
    }

    function transformOutput(htmlTxt) {
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlTxt, "text/html");
      
      // Use 1st heading as top panel heading
      const firstH1 = doc.body.firstElementChild;
      
      if (firstH1 && firstH1.tagName.toLowerCase() === 'h1') {
        if (mainTitle.textContent === pagePath) {
          SetHeaderText(firstH1.textContent.trim());
        }      
        firstH1.remove();
      }
      
      //relative link paths update for ZIP structure
      const checkList = ["href", "src", "data-href"];
    
      doc.querySelectorAll("*").forEach((el) => {
        checkList.forEach((attr) => {
          if (el.hasAttribute(attr)) {
            const val = el.getAttribute(attr);
            if (val 
              && el.tagName.toLowerCase() !== "img"
              && !/^https?:\/\//.test(val) 
              && !val.startsWith("mailto:") 
              && !val.startsWith("tel:") 
              && !val.startsWith("#")) {
              
              const newVal = `?d=${dataPath}&p=${encodeURIComponent(val)}&id=${encodeURIComponent(idxTreeItem)}`;
              el.setAttribute(attr, newVal);
            }
          }
        });
      });
      
      //code listings lines numbering
      doc.querySelectorAll('pre code').forEach((block) => {
        const lines = block.innerText.split('\n');
        block.innerHTML = lines.map(line =>
          `<span>${line}</span>`).join('\n');
        block.parentElement.classList.add('code-numbers');
      });
      
      //end
      return doc.documentElement.outerHTML;
    }
    
    async function loadMermaid(callback) {
      if (window.mermaid) {
        callback();
        return;
      }
      
      await appendJavascript('mermaid.min.js', callback);
    }
    
    async function appendJavascript(path, callback) {
      const script = document.createElement('script');
      if (/^https?:\/\//.test(path)) {
        script.src = path;
      } else {
        script.type = 'text/javascript';
        content = await searchArchiveForFile(path, arch3rdp);
        script.textContent = content;
      }
      script.onload = () => callback();
      document.head.appendChild(script);
    }
    
    function transformOutputConnected(doc) {
      //relative img src paths update for ZIP structure
      doc.querySelectorAll('img').forEach((img) => {
        (async () => {
          const src = img.getAttribute('src');
          if (src && !/^https?:\/\//.test(src)) {
            const data = await getDataOfPathInZIPImage(src);
            if (data) {
              img.src = data;
            }
          }
        })();
      });

      //mermaid graphs transformation
      const codeBlocks = doc.querySelectorAll('code.language-mermaid');
      if (codeBlocks.length > 0) {
        loadMermaid(() => {}).then(() => {
          codeBlocks.forEach(code => {
            const div = document.createElement('div');
            div.className = 'mermaid';
            div.textContent = code.textContent;
            code.parentElement.replaceWith(div);
          });
          
          mermaid.initialize({ startOnLoad: false });
          mermaid.init();
        });
      }
    }

    function nameForAnchor(text) {
      return text.toLowerCase()
        .trim()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-');
    }
    
    function transformOutputConnectedMd(doc) {
      const headings = doc.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
      headings.forEach(heading => {
        if (!heading.id) {
          heading.id = nameForAnchor(heading.textContent);
        }
        
        const anchor = document.createElement('a');
        anchor.href = `#${heading.id}`;
        anchor.className = 'anchor-link';
        anchor.textContent = ' #';
        
        heading.appendChild(anchor);
      });
    }

    async function loadZipFromUrl(url) {
      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const arrayBuffer = await response.arrayBuffer();

        const arch = await JSZip.loadAsync(arrayBuffer);
        return arch;
      } catch (error) {
        throw error;
      }
    }

    async function searchArchiveForFile(fileName, arch) {
      const fileObj = Object.keys(arch.files)
        .map(name => arch.files[name])
        .find(file => file.name === fileName);

      if (fileObj) {
        const content = await fileObj.async("text");
        return content;
      } else {
        return "";
      }
    }

    async function searchArchiveForFileB64(fileName, arch) {
      const fileObj = Object.keys(arch.files)
        .map(name => arch.files[name])
        .find(file => file.name === fileName);

      if (fileObj) {
        const content = await fileObj.async("base64");
        return content;
      } else {
        return "";
      }
    }
    
    function toggleSidebar() {
      if (sidebar.classList.contains('hidden')) {
        sidebar.classList.remove('hidden');
        showBtn.style.display = 'none';
      } else {
        sidebar.classList.add('hidden');
        showBtn.style.display = 'inline-block';
      }
    }

    function checkSidebarWidth() {
      if (sidebar.offsetWidth / window.innerWidth > 0.5) {
        sidebar.classList.add("too-wide");
      } else {
        sidebar.classList.remove("too-wide");
      }
    }

    function revealTreeItem(id) {
      const el = document.getElementById(id);
      if (!el) return;
    
      let parent = el.parentElement;
      while (parent) {
        if (parent.tagName === 'DETAILS') {
          parent.open = true;
        }
        parent = parent.parentElement;
      }
    }

    window.addEventListener("resize", checkSidebarWidth);
    window.addEventListener("load", checkSidebarWidth);
    
    function navPrev(event) {
      event.preventDefault();
      loadPageByTreeId(idxTreeItem-1);
    }
    
    function navNext(event) {
      event.preventDefault();
      loadPageByTreeId(idxTreeItem+1);
    }
    
    function navTop(event) {
      event.preventDefault();
      const treeItem = document.getElementById('tree-' + idxTreeItem);
      const upId = parseInt(treeItem.parentElement.parentElement.parentElement.querySelector('summary > a').id.slice(5));
      loadPageByTreeId(upId);
    }
    
    function loadPageByTreeId(id) {
      const treeItem = document.getElementById('tree-' + id);
      if (treeItem) {
        const syntheticClick = new MouseEvent("click", {
          bubbles: true,
          cancelable: true,
          view: window
        });
        treeItem.dispatchEvent(syntheticClick);
        idxTreeItem = id;
      }
      revealTreeItem('tree-' + id);
    }

    async function loadPage(event, path, heading, i) {
      event.preventDefault();
      await _loadPageI(path, heading, i);
      return false;
    }
    
    async function _loadPageI(path, heading, i) {
      const current = window.location.pathname + window.location.search + window.location.hash;
      const url = new URL(current, document.baseURI);
      url.searchParams.set('p', path);
      url.searchParams.set('id', i);
      idxTreeItem = i;
      history.pushState(null, '', `${url.pathname}?${url.searchParams.toString()}${url.hash}`);
    
      await getDataOfPathInZIP(path, heading);
      updateNavButtons(i);
    }
    
    function updateNavButtons(i) {
      if (i >= 0) {
        navL.classList.remove('hidden-btn');
        navT.classList.remove('hidden-btn');
        navR.classList.remove('hidden-btn');
      } else {
        navL.classList.add('hidden-btn');
        navT.classList.add('hidden-btn');
        navR.classList.add('hidden-btn');
      }
      
      const currentTreeItem = document.getElementById('tree-' + i);
      const nextTreeItem = document.getElementById('tree-' + (i + 1));
      
      if (i == 0) {
        navL.classList.add('hidden-btn');
        navT.classList.add('hidden-btn');
      }
      
      if (nextTreeItem == null) {
        navR.classList.add('hidden-btn');
      }
    }
    
    async function getDataOfPathInZIP(path, heading) {
      SetHeaderText(heading);
      const content = await searchArchiveForFile(path, archive);
      if (window.marked) {
        contentPane.innerHTML = transformOutput(marked.parse(content));
      }
      transformOutputConnected(contentPane);
      
      if (path.toLowerCase().endsWith('.md')) {
        transformOutputConnectedMd(contentPane);
      }
      
      if (content === '') {
        contentPane.innerHTML = `Given path <b>${path}</b> is not present inside the help ZIP archive <b>${dataPath}</b>.`;
        if (dataPath === '') {
          contentPane.innerHTML = msgNoData;
        }
      }
      
      const id = window.location.hash.substring(1);
      scrollToAnchor(id);
    }
    
    async function getDataOfPathInZIPImage(path) {
      const content = await searchArchiveForFileB64(path, archive);
      let mimeType = 'image/' + path.split('.').pop().toLowerCase();
      return `data:${mimeType};base64,${content}`;
    }
    
// File formats
    function linesToHtmlTree(linesP) {
      const lines = linesP.split("\n");
      const current = window.location.pathname + window.location.search + window.location.hash;
      const url = new URL(current, document.baseURI);
      let linksEmitted = -1;
    
      function makeLink(name, note, path) {
        if (path) {
          linksEmitted++;
          return `<a href="" id="tree-${linksEmitted}" onclick="return loadPage(event, '${path}', '${name}', ${linksEmitted})" title="${note}">${name}</a>`;
        } else {
          return `<a title="${note}">${name}</a>`;
        }
      }
    
      let html = "";
    
      const stack = [];
    
      function getIndent(line) {
        let count = 0;
        for (const ch of line) {
          if (ch === " ") count++;
          else break;
        }
        return count;
      }
    
      function closeLevels(toLevel) {
        while (stack.length > toLevel) {
          html += "</ul></details></li>";
          stack.pop();
        }
      }
    
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const indent = getIndent(line);
        const trimmed = line.trim();
        const parts = trimmed.split("|");
        const name = parts[0]?.trim() || "";
        const note = parts[1]?.trim() || "";
        const path = parts[2]?.trim() || "";
    
        let nextIndent = -1;
        if (i + 1 < lines.length) {
          nextIndent = getIndent(lines[i + 1]);
        }
    
        closeLevels(indent);
    
        const content = makeLink(name, note, path);
    
        if (nextIndent > indent) {
          html += `<li><details><summary>${content}</summary><ul>`;
          stack.push(indent);
        } else {
          html += `<li>${content}</li>`;
        }
      }
    
      closeLevels(0);
    
      return `${html}`;
    }
// E: File formats
  </script>
</body>
</html>